plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.8'
    id 'io.spring.dependency-management' version '1.1.0'
    id "org.sonarqube" version "3.5.0.2730"
//    id 'jacoco'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = 'com.litarary'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation group: 'org.postgresql', name: 'postgresql'

    //security
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
    //JWT
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // 파라미터 검증을 위한 의존성 추가
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'

    // gmail smtp 전송
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // Spring Rest Docs 추가
    asciidoctorExt group: 'org.springframework.restdocs', name: 'spring-restdocs-asciidoctor', version: '2.0.7.RELEASE'
    testImplementation group: 'org.springframework.restdocs', name: 'spring-restdocs-mockmvc', version: '2.0.7.RELEASE'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    //security test하기 위함
    testImplementation 'org.springframework.security:spring-security-test'
}




sonarqube {
    properties {
        property "sonar.projectKey", "dukki-labs_litarary"
        property "sonar.organization", "dukki-labs"
        property "sonar.host.url", "https://sonarcloud.io"
        property 'sonar.coverage.jacoco.xmlReportPaths', '${buildDir}/reports/jacoco/test/jacocoTestReport.xml'
        property 'sonar.java.binaries', 'build/classes'
        property 'sonar.test.inclusions', '**/*Test.java'
    }
}

//jacoco {
//    toolVersion = '0.8.8'
//}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    useJUnitPlatform()
//    finalizedBy jacocoTestReport // test 빌드 후 항상 Jacoco보고서를 만들도록 설정
    outputs.dir snippetsDir
}

asciidoctor {
    configurations 'asciidoctorExt'
    baseDirFollowsSourceFile()
    inputs.dir snippetsDir
    // 반환할 adoc 파일들을 설정한다.
    sources{
        include("**/*.adoc")
    }
    dependsOn test
}

asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

//jacocoTestReport {
//    dependsOn test // test 실행 후 jacocoTestReport가 동작하도록 의존성 설정
//    reports {
////        html.enabled(true)
//        xml.enabled(true)
//    }
////    finalizedBy(jacocoTestCoverageVerification)
//}

//Jacoco 커버리지 검증 룰 설정
//jacocoTestCoverageVerification {
//    violationRules {
//        rule {
//            enabled(true)
//            element("CLASS")
//            limit {
//                minimum = 0.0
//            }
//        }
//    }
//}

task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}

jar {
    enabled = false
}